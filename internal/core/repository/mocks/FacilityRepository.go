// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	models "go-hospital-server/internal/core/entity/models"

	mock "github.com/stretchr/testify/mock"

	response "go-hospital-server/internal/core/entity/response"
)

// FacilityRepository is an autogenerated mock type for the FacilityRepository type
type FacilityRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *FacilityRepository) Create(_a0 models.MedicalFacility) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.MedicalFacility) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *FacilityRepository) Delete(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *FacilityRepository) FindAll() ([]response.Facility, error) {
	ret := _m.Called()

	var r0 []response.Facility
	if rf, ok := ret.Get(0).(func() []response.Facility); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Facility)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: _a0
func (_m *FacilityRepository) FindByID(_a0 int) (response.FacilityDetails, error) {
	ret := _m.Called(_a0)

	var r0 response.FacilityDetails
	if rf, ok := ret.Get(0).(func(int) response.FacilityDetails); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(response.FacilityDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *FacilityRepository) Update(_a0 models.MedicalFacility) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.MedicalFacility) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
