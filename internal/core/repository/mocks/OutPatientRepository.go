// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	models "go-hospital-server/internal/core/entity/models"

	mock "github.com/stretchr/testify/mock"

	response "go-hospital-server/internal/core/entity/response"
)

// OutPatientRepository is an autogenerated mock type for the OutPatientRepository type
type OutPatientRepository struct {
	mock.Mock
}

// AdminFindAll provides a mock function with given fields:
func (_m *OutPatientRepository) AdminFindAll() ([]response.OutPatient, error) {
	ret := _m.Called()

	var r0 []response.OutPatient
	if rf, ok := ret.Get(0).(func() []response.OutPatient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.OutPatient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignNurse provides a mock function with given fields: _a0
func (_m *OutPatientRepository) AssignNurse(_a0 models.MedicCheck) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.MedicCheck) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoctorFindAll provides a mock function with given fields: _a0
func (_m *OutPatientRepository) DoctorFindAll(_a0 string) ([]response.OutPatient, error) {
	ret := _m.Called(_a0)

	var r0 []response.OutPatient
	if rf, ok := ret.Get(0).(func(string) []response.OutPatient); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.OutPatient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByDate provides a mock function with given fields: _a0, _a1, _a2
func (_m *OutPatientRepository) FindByDate(_a0 string, _a1 string, _a2 string) ([]response.OutPatient, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []response.OutPatient
	if rf, ok := ret.Get(0).(func(string, string, string) []response.OutPatient); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.OutPatient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: _a0
func (_m *OutPatientRepository) FindByID(_a0 int) (response.OutPatientDetails, error) {
	ret := _m.Called(_a0)

	var r0 response.OutPatientDetails
	if rf, ok := ret.Get(0).(func(int) response.OutPatientDetails); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(response.OutPatientDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMedicalRecord provides a mock function with given fields: _a0
func (_m *OutPatientRepository) NewMedicalRecord(_a0 models.MedicRecord) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.MedicRecord) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NurseFindAll provides a mock function with given fields: _a0
func (_m *OutPatientRepository) NurseFindAll(_a0 string) ([]response.OutPatient, error) {
	ret := _m.Called(_a0)

	var r0 []response.OutPatient
	if rf, ok := ret.Get(0).(func(string) []response.OutPatient); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.OutPatient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProceedDoctor provides a mock function with given fields: _a0
func (_m *OutPatientRepository) ProceedDoctor(_a0 models.MedicRecord) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.MedicRecord) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProceedNurse provides a mock function with given fields: _a0
func (_m *OutPatientRepository) ProceedNurse(_a0 models.MedicCheck) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.MedicCheck) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Report provides a mock function with given fields:
func (_m *OutPatientRepository) Report() ([]response.OutPatientDetails, error) {
	ret := _m.Called()

	var r0 []response.OutPatientDetails
	if rf, ok := ret.Get(0).(func() []response.OutPatientDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.OutPatientDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportLog provides a mock function with given fields: _a0, _a1
func (_m *OutPatientRepository) ReportLog(_a0 string, _a1 string) ([]response.OutPatientReportLog, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []response.OutPatientReportLog
	if rf, ok := ret.Get(0).(func(string, string) []response.OutPatientReportLog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.OutPatientReportLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
